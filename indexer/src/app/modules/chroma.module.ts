import { DynamicModule, Global, Logger, Module } from '@nestjs/common';
import { Chroma } from '@langchain/community/vectorstores/chroma';
import { OpenAIEmbeddings } from '@langchain/openai';

@Global()
@Module({})
export class ChromaModule {
	static register (apiKey: string): DynamicModule {
		return {
			module: ChromaModule,
			global: true,
			providers: [
				{
					provide: 'CHROMA_DB',
					useFactory: async (): Promise<Chroma> => {
						try {

                            if (!process.env.OPENAI_API_KEY) throw new Error('OpenAI API key is required');
                            
                            Logger.debug(process.env.CHROMA_URL, 'ChromaModule');
                            Logger.debug(process.env.COLLECTION_NAME, 'ChromaModule');

                            const vectorStore = await Chroma.fromExistingCollection(
                                new OpenAIEmbeddings({
                                    openAIApiKey: apiKey,
                                    modelName: process.env.MODEL_EMBEDDING,
                                }),
                                { 
                                    collectionName: process.env.COLLECTION_NAME,
                                    url: process.env.CHROMA_URL,
                                }
                            );
                            
                            const ensure = await vectorStore.ensureCollection();
                            Logger.debug(JSON.stringify(ensure), 'ChromaModule:ensureCollection');

                            const docCount = await vectorStore.collection.count();
                            Logger.debug(`Loaded ${docCount} documents from ChromaDB`, 'ChromaModule');

                            if (docCount < 2) {

                                await vectorStore.addDocuments([
                                    {
                                        pageContent: "Creating SIWE Messages\n\nThis section describes how to generate Sign-In with Ethereum messages and print them to the console.\n\nA completed version of this part can be found in the example repository (\n\n00_print\n\n).\n\nCreating SIWE messages in JavaScript is straightforward when using the siwe library in npm. To begin, create a new project called siwe-print.\n\nmkdir\n\nsiwe-print\n\n&&\n\ncd\n\nsiwe-print/\n\nyarn init --yes\n\nyarn add siwe ethers\n\nmkdir src/\n\nWe can then write the following into ./src/index.js:\n\nsrc/index.js\n\nconst\n\nsiwe\n\nrequire\n\n\"siwe\"\n\n);\n\nconst\n\ndomain\n\n\"localhost\"\n\nconst\n\norigin\n\n\"https: //localhost/login\"\n\nfunction\n\ncreateSiweMessage\n\naddress\n\nstatement\n\nconst\n\nsiweMessage\n\nnew\n\nsiwe\n\nSiweMessage\n\n({\n\ndomain,\n\naddress,\n\nstatement,\n\nuri: origin,\n\nversion\n\n\"1\"\n\nchainId: \"1\"\n\n});\n\nreturn\n\nsiweMessage\n\nprepareMessage\n\n();\n\nconsole\n\nlog\n\ncreateSiweMessage\n\n\"0x6Ee9894c677EFa1c56392e5E7533DE76004C8D94\",\n\n\"This is a test statement.\"\n\n));\n\nNow run the example:\n\nnode src/index.js\n\nYou should see output similar to the following message, with different values for the Nonce and Issued At fields:\n\nlocalhost wants you to sign in with your Ethereum account:\n\n0x6Ee9894c677EFa1c56392e5E7533DE76004C8D94\n\nThis is a test statement.\n\nURI: https://localhost/login\n\nVersion: 1\n\nChain ID: 1\n\nNonce: oNCEHm5jzQU2WvuBB\n\nIssued At: 2022-01-28T23:28:16.013Z\n\nTo learn about all the available fields in a SiweMessage, check out the information in\n\nEIP-4361\n\nThe fields we are most interested in for the purposes of this guide are\n\nand\n\nis the Ethereum address which the user is signing in with, and the\n\nas this will describe to the user what action we wish to perform on their behalf.\n\nOften, as in this example, we don\"t need to do any manipulation of the message, so we can immediately convert it into the textual representation that the user will sign.\n\nPreviousQuickstart Guide\n\nNextImplement the Frontend\n\nLast modified \n\n8mo ago\n\n,",
                                        metadata: {
                                            indexId: "kjzl6kcym7w8y6u9wc65num3b2bivv8mrnkuhtfxy1y5fqspakajc5fu7gkra3w",
                                            indexTitle: "SIWE Messages",
                                            indexCreatedAt: new Date(),
                                            indexUpdatedAt: new Date(),
                                            indexDeletedAt: "ul",
                                            indexOwnerDID: "did:pkh:eip155:175177:0x1b9Aceb609a62bae0c0a9682A9268138Faff4F5f",
                                            webPageId: "kjzl6kcym7w8y7vazujr0tmuxolq2b1qmjno2w3llwth8fc1p900tx0ilhi3eaq",
                                            webPageTitle: "SIWE Messages",
                                            webPageUrl: "https://docs.login.xyz/sign-in-with-ethereum/quickstart-guide/creating-siwe-messages",
                                            webPageContent: "Creating SIWE Messages\n\nThis section describes how to generate Sign-In with Ethereum messages and print them to the console.\n\nA completed version of this part can be found in the example repository (\n\n00_print\n\n).\n\nCreating SIWE messages in JavaScript is straightforward when using the siwe library in npm. To begin, create a new project called siwe-print.\n\nmkdir\n\nsiwe-print\n\n&&\n\ncd\n\nsiwe-print/\n\nyarn init --yes\n\nyarn add siwe ethers\n\nmkdir src/\n\nWe can then write the following into ./src/index.js:\n\nsrc/index.js\n\nconst\n\nsiwe\n\nrequire\n\n\"siwe\"\n\n);\n\nconst\n\ndomain\n\n\"localhost\"\n\nconst\n\norigin\n\n\"https: //localhost/login\"\n\nfunction\n\ncreateSiweMessage\n\naddress\n\nstatement\n\nconst\n\nsiweMessage\n\nnew\n\nsiwe\n\nSiweMessage\n\n({\n\ndomain,\n\naddress,\n\nstatement,\n\nuri: origin,\n\nversion\n\n\"1\"\n\nchainId: \"1\"\n\n});\n\nreturn\n\nsiweMessage\n\nprepareMessage\n\n();\n\nconsole\n\nlog\n\ncreateSiweMessage\n\n\"0x6Ee9894c677EFa1c56392e5E7533DE76004C8D94\",\n\n\"This is a test statement.\"\n\n));\n\nNow run the example:\n\nnode src/index.js\n\nYou should see output similar to the following message, with different values for the Nonce and Issued At fields:\n\nlocalhost wants you to sign in with your Ethereum account:\n\n0x6Ee9894c677EFa1c56392e5E7533DE76004C8D94\n\nThis is a test statement.\n\nURI: https://localhost/login\n\nVersion: 1\n\nChain ID: 1\n\nNonce: oNCEHm5jzQU2WvuBB\n\nIssued At: 2022-01-28T23:28:16.013Z\n\nTo learn about all the available fields in a SiweMessage, check out the information in\n\nEIP-4361\n\nThe fields we are most interested in for the purposes of this guide are\n\nand\n\nis the Ethereum address which the user is signing in with, and the\n\nas this will describe to the user what action we wish to perform on their behalf.\n\nOften, as in this example, we don\"t need to do any manipulation of the message, so we can immediately convert it into the textual representation that the user will sign.\n\nPreviousQuickstart Guide\n\nNextImplement the Frontend\n\nLast modified \n\n8mo ago\n\n,",
                                            webPageCreatedAt: "2024-01-06T20:16:40.992Z",
                                            webPageUpdatedAt: "2024-01-06T20:16:40.992Z",
                                            webPageDeletedAt: null
                                        }
                                    },
                                    {
                                        pageContent: "Documentation\n\nGithub\n\nIPLD is the data model of the content-addressable web. It allows us to treat all hash-linked data structures as subsets of a unified information space, unifying all data models that link data with hashes as instances of IPLD.\n\nWhy IPLD?\n\nA data model for interoperable protocols.\n\nContent addressing through hashes has become a widely-used means of connecting data in distributed systems, from the blockchains that run your favorite cryptocurrencies, to the commits that back your code, to the web’s content at large. Yet, whilst all of these tools rely on some common primitives, their specific underlying data structures are not interoperable.\n\nEnter IPLD: IPLD is a single namespace for all hash-inspired protocols. Through IPLD, links can be traversed across protocols, allowing you to explore data regardless of the underlying protocol.\n\nUse cases\n\nThe sky’s the limit as IPLD allows you to work across protocol boundaries. The point is that IPLD provides libraries that make the underlying data interoperable across tools and across protocols by default.\n\nBitcoin to Git\n\nReference your latest commits in a git branch to a bitcoin transaction to timestamp your work. By linking your git commit, you can view the commit from your blockchain explorer.\n\nEthereum to IPFS\n\nHave your next contract refer to media on IPFS, perhaps modifying it and tracking its changes on each function execution. Seamlessly jump from function to object through IPLD addressing.\n\nFeatures\n\nA canonical data model\n\nA self-contained descriptive model that uniquely identifies any hash-based data structure and ensures the same logical object always maps to the exact same sequence of bits.\n\nProtocol independent resolution\n\nIPLD brings isolated systems together, making integration with existing protocols simple.\n\nUpgradeable\n\nWith Multiformats support, IPLD is easily upgradeable and will grow with your favorite protocols.\n\nOperates across formats\n\nExpress your IPLD objects in various serializable formats like JSON, CBOR, YAML, XML and many more, making IPLD a cinch to use with any framework.\n\nBackwards compatible\n\nNon-intrusive resolvers make IPLD easy to integrate within your existing work.\n\nA namespace for all protocols\n\nIPLD allows you to explore data across protocols seamlessly, binding hash-based data structures together through a common namespace.\n\nMedia\n\nIPLD is an open source project from the IPFS community. There are many ways you can contribute by getting involved. Learn more about IPLD from the community.\n\nJuan Benet: Enter the Merkle Forest\n\nResNetLab: Intro to InterPlanetary Linked Data\n\nWhy We Must Distribute The Web\n\nHow IPFS Deals With Files - IPFS Camp Workshop\n\nIPLD was started and is sponsored by\n\nProtocol Labs\n\nDocumentation\n\nGithub\n\nProtocol Labs | Except as\n\nnoted, content licensed\n\nCC-BY 3.0\n\n,",
                                        metadata: {
                                            indexId: "kjzl6kcym7w8y6u9wc65num3b2bivv8mrnkuhtfxy1y5fqspakajc5fu7gkra3w",
                                            indexTitle: "IPLD Main Page",
                                            indexCreatedAt: new Date(),
                                            indexUpdatedAt: new Date(),
                                            indexDeletedAt: "ul",
                                            indexOwnerDID: "did:pkh:eip155:175177:0x1b9Aceb609a62bae0c0a9682A9268138Faff4F5f",
                                            webPageId: "kjzl6kcym7w8y7vazujr0tmuxolq2b1qmjno2w3llwth8fc1p900tx0ilhi3eaq",
                                            webPageTitle: "IPLD Main Page",
                                            webPageUrl: "https://ipld.io/",
                                            webPageContent: "Documentation\n\nGithub\n\nIPLD is the data model of the content-addressable web. It allows us to treat all hash-linked data structures as subsets of a unified information space, unifying all data models that link data with hashes as instances of IPLD.\n\nWhy IPLD?\n\nA data model for interoperable protocols.\n\nContent addressing through hashes has become a widely-used means of connecting data in distributed systems, from the blockchains that run your favorite cryptocurrencies, to the commits that back your code, to the web’s content at large. Yet, whilst all of these tools rely on some common primitives, their specific underlying data structures are not interoperable.\n\nEnter IPLD: IPLD is a single namespace for all hash-inspired protocols. Through IPLD, links can be traversed across protocols, allowing you to explore data regardless of the underlying protocol.\n\nUse cases\n\nThe sky’s the limit as IPLD allows you to work across protocol boundaries. The point is that IPLD provides libraries that make the underlying data interoperable across tools and across protocols by default.\n\nBitcoin to Git\n\nReference your latest commits in a git branch to a bitcoin transaction to timestamp your work. By linking your git commit, you can view the commit from your blockchain explorer.\n\nEthereum to IPFS\n\nHave your next contract refer to media on IPFS, perhaps modifying it and tracking its changes on each function execution. Seamlessly jump from function to object through IPLD addressing.\n\nFeatures\n\nA canonical data model\n\nA self-contained descriptive model that uniquely identifies any hash-based data structure and ensures the same logical object always maps to the exact same sequence of bits.\n\nProtocol independent resolution\n\nIPLD brings isolated systems together, making integration with existing protocols simple.\n\nUpgradeable\n\nWith Multiformats support, IPLD is easily upgradeable and will grow with your favorite protocols.\n\nOperates across formats\n\nExpress your IPLD objects in various serializable formats like JSON, CBOR, YAML, XML and many more, making IPLD a cinch to use with any framework.\n\nBackwards compatible\n\nNon-intrusive resolvers make IPLD easy to integrate within your existing work.\n\nA namespace for all protocols\n\nIPLD allows you to explore data across protocols seamlessly, binding hash-based data structures together through a common namespace.\n\nMedia\n\nIPLD is an open source project from the IPFS community. There are many ways you can contribute by getting involved. Learn more about IPLD from the community.\n\nJuan Benet: Enter the Merkle Forest\n\nResNetLab: Intro to InterPlanetary Linked Data\n\nWhy We Must Distribute The Web\n\nHow IPFS Deals With Files - IPFS Camp Workshop\n\nIPLD was started and is sponsored by\n\nProtocol Labs\n\nDocumentation\n\nGithub\n\nProtocol Labs | Except as\n\nnoted, content licensed\n\nCC-BY 3.0\n\n,",
                                            webPageCreatedAt: "2024-01-06T20:16:40.992Z",
                                            webPageUpdatedAt: "2024-01-06T20:16:40.992Z",
                                            webPageDeletedAt: null
                                        }
                                
                                    },
                                    {
                                        pageContent: "\n\nWhy Ceramic?\n\nWhy Ceramic?\n\n,",
                                        metadata: {
                                            indexId: "kjzl6kcym7w8y6u9wc65num3b2bivv8mrnkuhtfxy1y5fqspakajc5fu7gkra3w",
                                            indexTitle: "Ceramic Why?",
                                            indexCreatedAt: new Date(),
                                            indexUpdatedAt: new Date(),
                                            indexDeletedAt: "ul",
                                            indexOwnerDID: "did:pkh:eip155:175177:0x1b9Aceb609a62bae0c0a9682A9268138Faff4F5f",
                                            webPageId: "kjzl6kcym7w8y7vazujr0tmuxolq2b1qmjno2w3llwth8fc1p900tx0ilhi3eaq",
                                            webPageTitle: "Ceramic Why?",
                                            webPageUrl: "https://developers.ceramic.network/docs/introduction/why-ceramic",
                                            webPageContent: "\n\nWhy Ceramic?\n\nWhy Ceramic?\n\n,",
                                            webPageCreatedAt: "2024-01-06T20:16:40.992Z",
                                            webPageUpdatedAt: "2024-01-06T20:16:40.992Z",
                                            webPageDeletedAt: "null"
                                        }
                                    },
                                    {
                                        pageContent: "Version: v2.x.x\n\nIntroduction\n\nnote\n\nLit Actions are still heavily in development and things may change. We\re grateful for feedback on how to improve the docs and examples!\n\nTo start developing with Lit Actions, check out examples here. For an in-depth review of the functionality provided by the Lit Actions SDK, take a look at our API docs.\n\nQuick Start\u200b\n\nReady to jump right in? Quickly learn how you can integrate Lit Actions into your own application:\n\nGuide: Hello World with Lit Actions\n\nGuide: Using Lit Actions for Access Control\n\nTool: GetLit CLI\n\nExample Implementation: Fetching Off-Chain Data in a Lit Action\n\nExample Implementation: Conditional Signing with Lit Actions\n\nOverview\u200b\n\nLit Actions are JavaScript programs that can be used to specify signing and authentication logic for PKPs. When used in conjunction with PKPs, Lit Actions are functionally serverless functions with their own private key-pair. Together these tools can be used to write data to blockchains and other state machines.\n\nEvery Lit Action gets executed across Lit’s threshold cryptography network in parallel, meaning the result of each program is independently verified by each node. Once a threshold of nodes have verified the result (more than two-thirds of network participants), the signing or decryption logic defined therein can be executed.\n\nA trivial example would be a Lit Action and associated PKP that checks if a number is prime, only returning a signature if the number is prime. Each node will execute the Lit Action with a submitted input and verify that it meets the required conditions. If it does, the node will provision an independent key share. Only after more than two-thirds of these shares have been collected can the complete signature be formed.\n\nFeatures\u200b\n\nBlockchain Agnostic: Lit Actions can be used to write data to blockchains using PKPs.\n\nImmutable: Once a Lit Action has been published, it cannot be modified.\n\nAtomicity: Using Mint/Grant/Burn, you can atomically link a PKP to an authorized set of Lit Actions. This method guarantees that a particular PKP can only ever be used to sign data from within the approved set.\n\nOff-Chain Compatibility: Lit Actions can pull in data from off-chain sources natively, without requiring the use of a third party oracle.\n\nExamples and Use Cases\u200b\n\nGenerating a signed Ethereum transaction\n\nAssigning PKP Permissions\n\nAutomating verifiable credential issuance\n\nExecuting a trade on Uniswap\n\nFetching off-chain price data\n\nEdit this page\n\nPreviousInitial Implementations\n\nNextGetLit CLI\n\nQuick Start\n\nOverview\n\nFeatures\n\nExamples and Use Cases\n\n,",
                                        metadata: {
                                            indexId: "kjzl6kcym7w8y6u9wc65num3b2bivv8mrnkuhtfxy1y5fqspakajc5fu7gkra3w",
                                            indexTitle: "Lit Protocol Actions",
                                            indexCreatedAt: new Date(),
                                            indexUpdatedAt: new Date(),
                                            indexDeletedAt: "ul",
                                            indexOwnerDID: "did:pkh:eip155:175177:0x1b9Aceb609a62bae0c0a9682A9268138Faff4F5f",
                                            webPageId: "kjzl6kcym7w8y7vazujr0tmuxolq2b1qmjno2w3llwth8fc1p900tx0ilhi3eaq",
                                            webPageTitle: "Lit Protocol Actions",
                                            webPageUrl: "https://developer.litprotocol.com/v2/litactions/intro/",
                                            webPageContent: "Version: v2.x.x\n\nIntroduction\n\nnote\n\nLit Actions are still heavily in development and things may change. We\re grateful for feedback on how to improve the docs and examples!\n\nTo start developing with Lit Actions, check out examples here. For an in-depth review of the functionality provided by the Lit Actions SDK, take a look at our API docs.\n\nQuick Start\u200b\n\nReady to jump right in? Quickly learn how you can integrate Lit Actions into your own application:\n\nGuide: Hello World with Lit Actions\n\nGuide: Using Lit Actions for Access Control\n\nTool: GetLit CLI\n\nExample Implementation: Fetching Off-Chain Data in a Lit Action\n\nExample Implementation: Conditional Signing with Lit Actions\n\nOverview\u200b\n\nLit Actions are JavaScript programs that can be used to specify signing and authentication logic for PKPs. When used in conjunction with PKPs, Lit Actions are functionally serverless functions with their own private key-pair. Together these tools can be used to write data to blockchains and other state machines.\n\nEvery Lit Action gets executed across Lit’s threshold cryptography network in parallel, meaning the result of each program is independently verified by each node. Once a threshold of nodes have verified the result (more than two-thirds of network participants), the signing or decryption logic defined therein can be executed.\n\nA trivial example would be a Lit Action and associated PKP that checks if a number is prime, only returning a signature if the number is prime. Each node will execute the Lit Action with a submitted input and verify that it meets the required conditions. If it does, the node will provision an independent key share. Only after more than two-thirds of these shares have been collected can the complete signature be formed.\n\nFeatures\u200b\n\nBlockchain Agnostic: Lit Actions can be used to write data to blockchains using PKPs.\n\nImmutable: Once a Lit Action has been published, it cannot be modified.\n\nAtomicity: Using Mint/Grant/Burn, you can atomically link a PKP to an authorized set of Lit Actions. This method guarantees that a particular PKP can only ever be used to sign data from within the approved set.\n\nOff-Chain Compatibility: Lit Actions can pull in data from off-chain sources natively, without requiring the use of a third party oracle.\n\nExamples and Use Cases\u200b\n\nGenerating a signed Ethereum transaction\n\nAssigning PKP Permissions\n\nAutomating verifiable credential issuance\n\nExecuting a trade on Uniswap\n\nFetching off-chain price data\n\nEdit this page\n\nPreviousInitial Implementations\n\nNextGetLit CLI\n\nQuick Start\n\nOverview\n\nFeatures\n\nExamples and Use Cases\n\n,",
                                            webPageCreatedAt: "2024-01-06T20:16:40.992Z",
                                            webPageUpdatedAt: "2024-01-06T20: 16: 40.992Z",
                                            webPageDeletedAt: null
                                        }
                                    },
                                    {
                                        pageContent: "Decentralized Identifiers (DIDs) v1.0\n\nCore architecture, data model, and representations\n\nW3C Recommendation 19 July 2022\n\nhttps://www.w3.org/TR/2022/REC-did-core-20220719/\n\nhttps://www.w3.org/TR/did-core/\n\nhttps://w3c.github.io/did-core/\n\nhttps://www.w3.org/standards/history/did-core\n\nCommit history\n\nhttps://w3c.github.io/did-test-suite/\n\nManu Sporny (Digital Bazaar)\n\nAmy Guy (Digital Bazaar)\n\nMarkus Sabadello (Danube Tech)\n\nDrummond Reed (Evernym/Avast)\n\nManu Sporny (Digital Bazaar)\n\nDave Longley (Digital Bazaar)\n\nMarkus Sabadello (Danube Tech)\n\nDrummond Reed (Evernym/Avast)\n\nOrie Steele (Transmute)\n\nChristopher Allen (Blockchain Commons)\n\nGitHub w3c/did-core\n        (pull requests,\n        new issue,\n        open issues)\n\npublic-did-wg@w3.org with subject line [did-core] … message topic … (archives)\n\nErrata exists.\n\nDID Use Cases and Requirements\n\nDID Specification Registries\n\nDID Core Implementation Report\n\nSee also\n          \n            translations.\n\nCopyright\n    ©\n    2022\n\nW3C\n\nMIT,\n\nERCIM,\n\nKeio,\n\nBeihang). W3C\n\nliability,\n\ntrademark and\n\npermissive document license rules apply.\n\n,",
                                        metadata: {
                                            indexId: "kjzl6kcym7w8y6u9wc65num3b2bivv8mrnkuhtfxy1y5fqspakajc5fu7gkra3w",
                                            indexTitle: "DID Core",
                                            indexCreatedAt: new Date(),
                                            indexUpdatedAt: new Date(),
                                            indexDeletedAt: "ul",
                                            indexOwnerDID: "did:pkh:eip155:175177:0x1b9Aceb609a62bae0c0a9682A9268138Faff4F5f",
                                            webPageId: "kjzl6kcym7w8y7vazujr0tmuxolq2b1qmjno2w3llwth8fc1p900tx0ilhi3eaq",
                                            webPageTitle: "DID Core",
                                            webPageUrl: "https://www.w3.org/TR/did-core/#:~:text=Decentralized%20identifiers%20(DIDs)%20are%20a,the%20controller%20of%20the%20DID.",
                                            webPageContent: "Decentralized Identifiers (DIDs) v1.0\n\nCore architecture, data model, and representations\n\nW3C Recommendation 19 July 2022\n\nhttps://www.w3.org/TR/2022/REC-did-core-20220719/\n\nhttps://www.w3.org/TR/did-core/\n\nhttps://w3c.github.io/did-core/\n\nhttps://www.w3.org/standards/history/did-core\n\nCommit history\n\nhttps://w3c.github.io/did-test-suite/\n\nManu Sporny (Digital Bazaar)\n\nAmy Guy (Digital Bazaar)\n\nMarkus Sabadello (Danube Tech)\n\nDrummond Reed (Evernym/Avast)\n\nManu Sporny (Digital Bazaar)\n\nDave Longley (Digital Bazaar)\n\nMarkus Sabadello (Danube Tech)\n\nDrummond Reed (Evernym/Avast)\n\nOrie Steele (Transmute)\n\nChristopher Allen (Blockchain Commons)\n\nGitHub w3c/did-core\n        (pull requests,\n        new issue,\n        open issues)\n\npublic-did-wg@w3.org with subject line [did-core] … message topic … (archives)\n\nErrata exists.\n\nDID Use Cases and Requirements\n\nDID Specification Registries\n\nDID Core Implementation Report\n\nSee also\n          \n            translations.\n\nCopyright\n    ©\n    2022\n\nW3C\n\nMIT,\n\nERCIM,\n\nKeio,\n\nBeihang). W3C\n\nliability,\n\ntrademark and\n\npermissive document license rules apply.\n\n,",
                                            webPageCreatedAt: "2024-01-06T20:16:40.992Z",
                                            webPageUpdatedAt: "2024-01-06T20:16:40.992Z",
                                            webPageDeletedAt: null
                                        }
                                    },
                                    {
                                        pageContent: "Protocol Labs\n\nWork\n\nAbout\n\nJoin\n\nBlog\n\nPurpose and Vision\n\nCollaborations\n\nTimeline\n\nProtocol\n\nLabs\n\ndrives\n\nbreakthroughs\n\nin\n\ncomputing\n\nto\n\npush\n\nhumanity\n\nforward\n\nPurpose and Vision\n\nProtocol Labs is an innovation network that connects over 600 tech startups, service providers, investment funds, accelerators, foundations, and other organizations developing breakthrough technologies and products in the frontiers of computing: web3, AI, AR, VR, BCI, hardware, and more.\n\nOrganizations collaborate across the network to solve common problems, share knowledge and resources, and accelerate the R&D process for a wide range of technological fields.\n\nCollaborations\n\nWe work with a community of people and organizations building a better future through technology.\n\nTimeline of Work\n\nBig things have small beginnings. Here is a slice of our story.\n\n2013\n           August IPFS and Filecoin — new protocols to decentralize the web and cloud storage — start to develop as ideas and prototypes.\n\n2014\n           May Protocol Labs (PL) founded by Juan Benet to improve the internet and computing. PL is part of the YCombinator S14 program.July Initial IPFS and Filecoin papers released. IPFS Community forms. go-ipfs and js-ipfs in development. Early IPFS and PL contributors join.September PL raises funding from prominent technology investors.\n\n2015\n           February go-ipfs alpha is released, and development and growth in the open begins.Q3 IPFS gains usage in the Ethereum community, and among other blockchain networks.\n\n2016\n           March Protocol Labs raises funding from BlueYard (blog), USV (blog), and other prominent investors.April go-ipfs 0.4.0 is released, with a large set of improvements.June libp2p, Multiformats, and IPLD are split out from IPFS, ahead of the first Decentralized Web Summit with internet pioneers.\n\n2017\n           Q1 PL redesigns the Filecoin protocol, culminating in the invention of Proofs-of-Replication and other cryptography results. PL creates initial version of CoinList with AngelList to run Filecoin and other token sales.July PL Filecoin v2 paper is released.Q3 PL raises funding through the Filecoin Token Sale, raising $205.8M total.October CoinList launches as an independent company, spun out from Protocol Labs and AngelList. The SAFT Project launches as a collaboration between Protocol Labs, Cooley, and other token creators, legal experts, and investors.\n\n2018\n           April Protocol Labs Research and RFP Grant Program debut.September PL hosts LabDay 2018, a day-long event dedicated to contributors and collaborators in the Protocol Labs ecosystem.\n\n2019\n           January First ProtoSchool workshop held in Denver, CO.February PL introduces the Permissive License Stack, an open-source approach to intellectual property. Filecoin code is opened to the community and first devnets launched.December Filecoin Testnet launches, and grows to 5 PB of proved storage in the following months.\n\n2020\n           April IPFS 0.5.0 is released.May Testground, a platform for testing, benchmarking, and simulating distributed and p2p systems at scale, launches.August The League of Entropy, a partnership between Protocol Labs, Cloudflare, the Ethereum Foundation, and others, launches drand, the Internet’s first production-grade, publicly verifiable randomness beacon.October Filecoin mainnet launches, surpassing 1 EiB of storage capacity within its first month.\n\n2021\n           April nft.storage launches, providing off-chain storage of NFT metadata and assets in a free, simple service. More than 40M NFTs stored on IPFS & Filecoin within the first year!July Protocol Labs begins transition to a decentralized network, forming independent teams that collaborate openly.September Filecoin and IPFS builders funnel continues to grow, with over 10,000+ developers engaged YTD through hackathons and grants.October The Filecoin network continues to grow, with over 3,300 storage providers and over 12EB of capacity, making Filecoin the largest aggregation of data storage in the history of the world.November The inaugural Funding The Commons was held, creating a forum for people making shared goods faster and more robustly via user-friendly mechanisms and robust experiments.\n\n2022\n           February PLN Launchpad, a full-time onboarding program for new network members, kicks off its first cohort. It ends 2022 with the successful completion of eight cohorts.September Inaugural FIL VC hosted in Singapore, with 26 teams and 300+ investors participatingOctober LabWeek22, our first-ever decentralized conference, brought together over 150 PLN teams, with 1,000+ attendees and 100+ speakers at 38 events in Lisbon.November Protocol Labs and Filecoin Foundation announce an alliance (Decentralized Storage Alliance) with AMD, Seagate and EY, to help more companies make the transition from Web2 to Web3.December Saturn, a Web3 CDN in Filecoin’s retrieval market, launches version 1.\n\n2023\n           January Bacalhau Python SDK ships, offering client-side logic, enabling builders to fully interact with Bacalhau with a user-friendly, Pythonic interface.March Filecoin Virtual Machine (FVM) is live on mainnet! The Filecoin blockchain now supports smart contracts and user programmability via the FVM, unlocking the enormous potential of an open data economy.July Builders Funnel and PL Ventures continue to scale, with [X] teams receiving investment and support from the PL Network.September PL VS (PL Venture Studio) introduced. Additional Protocol Labs teams launched as independent companies, including Expanso, Lurk, Funding the Commons, and Solaris.\n\nGet Involved\n\nProtocol Labs is an innovation network driving breakthroughs in computing, to push humanity forward. PL connects more than 600 tech startups, funds, accelerators, foundations, open source projects, service providers, and other organizations. Their work spans web3, AI, AR, VR, BCI, hardware, and more.\n\nJoin Us\n\nProtocol Labs\n\nPress\n\nPrivacy\n\nContact\n\nTerms\n\nTwitter\n\nLinkedIn\n\nYouTube\n\n,",
                                        metadata: {
                                            indexId: "kjzl6kcym7w8y6u9wc65num3b2bivv8mrnkuhtfxy1y5fqspakajc5fu7gkra3w",
                                            indexTitle: "Protocol Labs",
                                            indexCreatedAt: new Date(),
                                            indexUpdatedAt: new Date(),
                                            indexDeletedAt: "ul",
                                            indexOwnerDID: "did:pkh:eip155:175177:0x1b9Aceb609a62bae0c0a9682A9268138Faff4F5f",
                                            webPageId: "kjzl6kcym7w8y7vazujr0tmuxolq2b1qmjno2w3llwth8fc1p900tx0ilhi3eaq",
                                            webPageTitle: "Protocol Labs",
                                            webPageUrl: "https://protocol.ai/about/",
                                            webPageContent: "Protocol Labs\n\nWork\n\nAbout\n\nJoin\n\nBlog\n\nPurpose and Vision\n\nCollaborations\n\nTimeline\n\nProtocol\n\nLabs\n\ndrives\n\nbreakthroughs\n\nin\n\ncomputing\n\nto\n\npush\n\nhumanity\n\nforward\n\nPurpose and Vision\n\nProtocol Labs is an innovation network that connects over 600 tech startups, service providers, investment funds, accelerators, foundations, and other organizations developing breakthrough technologies and products in the frontiers of computing: web3, AI, AR, VR, BCI, hardware, and more.\n\nOrganizations collaborate across the network to solve common problems, share knowledge and resources, and accelerate the R&D process for a wide range of technological fields.\n\nCollaborations\n\nWe work with a community of people and organizations building a better future through technology.\n\nTimeline of Work\n\nBig things have small beginnings. Here is a slice of our story.\n\n2013\n           August IPFS and Filecoin — new protocols to decentralize the web and cloud storage — start to develop as ideas and prototypes.\n\n2014\n           May Protocol Labs (PL) founded by Juan Benet to improve the internet and computing. PL is part of the YCombinator S14 program.July Initial IPFS and Filecoin papers released. IPFS Community forms. go-ipfs and js-ipfs in development. Early IPFS and PL contributors join.September PL raises funding from prominent technology investors.\n\n2015\n           February go-ipfs alpha is released, and development and growth in the open begins.Q3 IPFS gains usage in the Ethereum community, and among other blockchain networks.\n\n2016\n           March Protocol Labs raises funding from BlueYard (blog), USV (blog), and other prominent investors.April go-ipfs 0.4.0 is released, with a large set of improvements.June libp2p, Multiformats, and IPLD are split out from IPFS, ahead of the first Decentralized Web Summit with internet pioneers.\n\n2017\n           Q1 PL redesigns the Filecoin protocol, culminating in the invention of Proofs-of-Replication and other cryptography results. PL creates initial version of CoinList with AngelList to run Filecoin and other token sales.July PL Filecoin v2 paper is released.Q3 PL raises funding through the Filecoin Token Sale, raising $205.8M total.October CoinList launches as an independent company, spun out from Protocol Labs and AngelList. The SAFT Project launches as a collaboration between Protocol Labs, Cooley, and other token creators, legal experts, and investors.\n\n2018\n           April Protocol Labs Research and RFP Grant Program debut.September PL hosts LabDay 2018, a day-long event dedicated to contributors and collaborators in the Protocol Labs ecosystem.\n\n2019\n           January First ProtoSchool workshop held in Denver, CO.February PL introduces the Permissive License Stack, an open-source approach to intellectual property. Filecoin code is opened to the community and first devnets launched.December Filecoin Testnet launches, and grows to 5 PB of proved storage in the following months.\n\n2020\n           April IPFS 0.5.0 is released.May Testground, a platform for testing, benchmarking, and simulating distributed and p2p systems at scale, launches.August The League of Entropy, a partnership between Protocol Labs, Cloudflare, the Ethereum Foundation, and others, launches drand, the Internet’s first production-grade, publicly verifiable randomness beacon.October Filecoin mainnet launches, surpassing 1 EiB of storage capacity within its first month.\n\n2021\n           April nft.storage launches, providing off-chain storage of NFT metadata and assets in a free, simple service. More than 40M NFTs stored on IPFS & Filecoin within the first year!July Protocol Labs begins transition to a decentralized network, forming independent teams that collaborate openly.September Filecoin and IPFS builders funnel continues to grow, with over 10,000+ developers engaged YTD through hackathons and grants.October The Filecoin network continues to grow, with over 3,300 storage providers and over 12EB of capacity, making Filecoin the largest aggregation of data storage in the history of the world.November The inaugural Funding The Commons was held, creating a forum for people making shared goods faster and more robustly via user-friendly mechanisms and robust experiments.\n\n2022\n           February PLN Launchpad, a full-time onboarding program for new network members, kicks off its first cohort. It ends 2022 with the successful completion of eight cohorts.September Inaugural FIL VC hosted in Singapore, with 26 teams and 300+ investors participatingOctober LabWeek22, our first-ever decentralized conference, brought together over 150 PLN teams, with 1,000+ attendees and 100+ speakers at 38 events in Lisbon.November Protocol Labs and Filecoin Foundation announce an alliance (Decentralized Storage Alliance) with AMD, Seagate and EY, to help more companies make the transition from Web2 to Web3.December Saturn, a Web3 CDN in Filecoin’s retrieval market, launches version 1.\n\n2023\n           January Bacalhau Python SDK ships, offering client-side logic, enabling builders to fully interact with Bacalhau with a user-friendly, Pythonic interface.March Filecoin Virtual Machine (FVM) is live on mainnet! The Filecoin blockchain now supports smart contracts and user programmability via the FVM, unlocking the enormous potential of an open data economy.July Builders Funnel and PL Ventures continue to scale, with [X] teams receiving investment and support from the PL Network.September PL VS (PL Venture Studio) introduced. Additional Protocol Labs teams launched as independent companies, including Expanso, Lurk, Funding the Commons, and Solaris.\n\nGet Involved\n\nProtocol Labs is an innovation network driving breakthroughs in computing, to push humanity forward. PL connects more than 600 tech startups, funds, accelerators, foundations, open source projects, service providers, and other organizations. Their work spans web3, AI, AR, VR, BCI, hardware, and more.\n\nJoin Us\n\nProtocol Labs\n\nPress\n\nPrivacy\n\nContact\n\nTerms\n\nTwitter\n\nLinkedIn\n\nYouTube\n\n,",
                                            webPageCreatedAt: "2024-01-06T20:16:40.992Z",
                                            webPageUpdatedAt: "2024-01-06T20:16:40.992Z",
                                            webPageDeletedAt: null
                                        }
                                    },
                                    {
                                        pageContent: "\n\nGet started\n\nIntroduction\n\nIntroduction\n\nLangChain is a framework for developing applications powered by language models. It enables applications that:\n\nAre context-aware: connect a language model to sources of context (prompt instructions, few shot examples, content to ground its response in, etc.)\n\nReason: rely on a language model to reason (about how to answer based on provided context, what actions to take, etc.)\n\nThis framework consists of several parts.\n\nLangChain Libraries: The Python and JavaScript libraries. Contains interfaces and integrations for a myriad of components, a basic run time for combining these components into chains and agents, and off-the-shelf implementations of chains and agents.\n\nLangChain Templates: A collection of easily deployable reference architectures for a wide variety of tasks.\n\nLangServe: A library for deploying LangChain chains as a REST API.\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor chains built on any LLM framework and seamlessly integrates with LangChain.\n\nTogether, these products simplify the entire application lifecycle:\n\nDevelop: Write your applications in LangChain/LangChain.js. Hit the ground running using Templates for reference.\n\nProductionize: Use LangSmith to inspect, test and monitor your chains, so that you can constantly improve and deploy with confidence.\n\nDeploy: Turn any chain into an API with LangServe.\n\nLangChain Libraries\u200b\n\nThe main value props of the LangChain packages are:\n\nComponents: composable tools and integrations for working with language models. Components are modular and easy-to-use, whether you are using the rest of the LangChain framework or not\n\nOff-the-shelf chains: built-in assemblages of components for accomplishing higher-level tasks\n\nOff-the-shelf chains make it easy to get started. Components make it easy to customize existing chains and build new ones.\n\nThe LangChain libraries themselves are made up of several different packages.\n\nlangchain-core: Base abstractions and LangChain Expression Language.\n\nlangchain-community: Third party integrations.\n\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\n\nGet started\u200b\n\nHere’s how to install LangChain, set up your environment, and start building.\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nnote\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nLangChain Expression Language (LCEL)\u200b\n\nLCEL is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nOverview: LCEL and its benefits\n\nInterface: The standard interface for LCEL objects\n\nHow-to: Key features of LCEL\n\nCookbook: Example code for accomplishing common tasks\n\nModules\u200b\n\nLangChain provides standard, extendable interfaces and integrations for the following modules:\n\nModel I/O\u200b\n\nInterface with language models\n\nRetrieval\u200b\n\nInterface with application-specific data\n\nAgents\u200b\n\nLet models choose which tools to use given high-level directives\n\nExamples, ecosystem, and resources\u200b\n\nUse cases\u200b\n\nWalkthroughs and techniques for common end-to-end use cases, like:\n\nDocument question answering\n\nChatbots\n\nAnalyzing structured data\n\nand much more...\n\nIntegrations\u200b\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides\u200b\n\nBest practices for developing with LangChain.\n\nAPI reference\u200b\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nDeveloper's guide\u200b\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nCommunity\u200b\n\nHead to the Community navigator to find places to ask questions, share feedback, meet other developers, and dream about the future of LLM's.\n\nPreviousGet started\n\nNextInstallation\n\nLangChain Libraries\n\nGet started\n\nLangChain Expression Language (LCEL)\n\nModules\n\nExamples, ecosystem, and resourcesUse casesIntegrationsGuidesAPI referenceDeveloper's guideCommunity\n\n,",
                                        metadata: {
                                            indexId: "kjzl6kcym7w8y6u9wc65num3b2bivv8mrnkuhtfxy1y5fqspakajc5fu7gkra3w",
                                            indexTitle: "Langchain",
                                            indexCreatedAt: new Date(),
                                            indexUpdatedAt: new Date(),
                                            indexDeletedAt: "ul",
                                            indexOwnerDID: "did:pkh:eip155:175177:0x1b9Aceb609a62bae0c0a9682A9268138Faff4F5f",
                                            webPageId: "kjzl6kcym7w8y7vazujr0tmuxolq2b1qmjno2w3llwth8fc1p900tx0ilhi3eaq",
                                            webPageTitle: "Langchain",
                                            webPageUrl: "https://python.langchain.com/docs/get_started/introduction",
                                            webPageContent: "\n\nGet started\n\nIntroduction\n\nIntroduction\n\nLangChain is a framework for developing applications powered by language models. It enables applications that:\n\nAre context-aware: connect a language model to sources of context (prompt instructions, few shot examples, content to ground its response in, etc.)\n\nReason: rely on a language model to reason (about how to answer based on provided context, what actions to take, etc.)\n\nThis framework consists of several parts.\n\nLangChain Libraries: The Python and JavaScript libraries. Contains interfaces and integrations for a myriad of components, a basic run time for combining these components into chains and agents, and off-the-shelf implementations of chains and agents.\n\nLangChain Templates: A collection of easily deployable reference architectures for a wide variety of tasks.\n\nLangServe: A library for deploying LangChain chains as a REST API.\n\nLangSmith: A developer platform that lets you debug, test, evaluate, and monitor chains built on any LLM framework and seamlessly integrates with LangChain.\n\nTogether, these products simplify the entire application lifecycle:\n\nDevelop: Write your applications in LangChain/LangChain.js. Hit the ground running using Templates for reference.\n\nProductionize: Use LangSmith to inspect, test and monitor your chains, so that you can constantly improve and deploy with confidence.\n\nDeploy: Turn any chain into an API with LangServe.\n\nLangChain Libraries\u200b\n\nThe main value props of the LangChain packages are:\n\nComponents: composable tools and integrations for working with language models. Components are modular and easy-to-use, whether you are using the rest of the LangChain framework or not\n\nOff-the-shelf chains: built-in assemblages of components for accomplishing higher-level tasks\n\nOff-the-shelf chains make it easy to get started. Components make it easy to customize existing chains and build new ones.\n\nThe LangChain libraries themselves are made up of several different packages.\n\nlangchain-core: Base abstractions and LangChain Expression Language.\n\nlangchain-community: Third party integrations.\n\nlangchain: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\n\nGet started\u200b\n\nHere’s how to install LangChain, set up your environment, and start building.\n\nWe recommend following our Quickstart guide to familiarize yourself with the framework by building your first LangChain application.\n\nRead up on our Security best practices to make sure you're developing safely with LangChain.\n\nnote\n\nThese docs focus on the Python LangChain library. Head here for docs on the JavaScript LangChain library.\n\nLangChain Expression Language (LCEL)\u200b\n\nLCEL is a declarative way to compose chains. LCEL was designed from day 1 to support putting prototypes in production, with no code changes, from the simplest “prompt + LLM” chain to the most complex chains.\n\nOverview: LCEL and its benefits\n\nInterface: The standard interface for LCEL objects\n\nHow-to: Key features of LCEL\n\nCookbook: Example code for accomplishing common tasks\n\nModules\u200b\n\nLangChain provides standard, extendable interfaces and integrations for the following modules:\n\nModel I/O\u200b\n\nInterface with language models\n\nRetrieval\u200b\n\nInterface with application-specific data\n\nAgents\u200b\n\nLet models choose which tools to use given high-level directives\n\nExamples, ecosystem, and resources\u200b\n\nUse cases\u200b\n\nWalkthroughs and techniques for common end-to-end use cases, like:\n\nDocument question answering\n\nChatbots\n\nAnalyzing structured data\n\nand much more...\n\nIntegrations\u200b\n\nLangChain is part of a rich ecosystem of tools that integrate with our framework and build on top of it. Check out our growing list of integrations.\n\nGuides\u200b\n\nBest practices for developing with LangChain.\n\nAPI reference\u200b\n\nHead to the reference section for full documentation of all classes and methods in the LangChain and LangChain Experimental Python packages.\n\nDeveloper's guide\u200b\n\nCheck out the developer's guide for guidelines on contributing and help getting your dev environment set up.\n\nCommunity\u200b\n\nHead to the Community navigator to find places to ask questions, share feedback, meet other developers, and dream about the future of LLM's.\n\nPreviousGet started\n\nNextInstallation\n\nLangChain Libraries\n\nGet started\n\nLangChain Expression Language (LCEL)\n\nModules\n\nExamples, ecosystem, and resourcesUse casesIntegrationsGuidesAPI referenceDeveloper's guideCommunity\n\n,",
                                            webPageCreatedAt: "2024-01-06T20:16:40.992Z",
                                            webPageUpdatedAt: "2024-01-06T20: 16: 40.992Z",
                                            webPageDeletedAt: null
                                        }
                                    }
                                ])


                            }

                            return vectorStore;
                            
						} catch (e) {
							Logger.error('ChromaDB connection failure:', e, 'ChromaDBModule');
							throw new Error('CHROMADB_CONNECTION_FAILURE');
						}
					},
				},
			],
			exports: ['CHROMA_DB'],
		};
	}
}