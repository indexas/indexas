@import "./functions";
@import "./variables";

@mixin no-select {
	user-select: none;
	-moz-user-select: none;
	-webkit-user-select: none;
}

@mixin button-color($color, $bg, $darken, $lighten, $transition, $outlined: false) {
	@if $outlined {
		background-color: $bg;
		border: 1px solid $color;
		color: $color;

		&:hover {
			transition: $transition;
			color: darken($color, $darken);
			border-color: darken($color, $darken);

			&.btn-group-item {
				transition: none;
				color: $color;
				border-color: $color;
			}
		}

		&:active,
		&:visited {
			transition: none;
			color: lighten($color, $lighten);
			border-color: lighten($color, $lighten);
		}
	} @else {
		background-color: $bg;
		border: 1px solid $bg;
		color: $color;

		&:hover {
			transition: $transition;
			background-color: darken($bg, $darken);
		}

		&:active,
		&:visited {
			transition: none;
			background-color: lighten($bg, $lighten);
		}
	}
}

@mixin 	theme-color($color, $bg, $outlined: false) {
	@if $outlined {
		background-color: $bg;
		color: $color;
		border: 1px solid $color;
		box-sizing: content-box;
	} @else {
		background-color: $bg;
		color: $color;
		border: 1px solid $bg;
	}
}

/*
	Creates all responsive size for component. Example map is below
	$input-height: (
		"xs": (
			"sm": 2.8rem,
			"md": 3.2rem,
			"lg": 3.6rem,
		),
		"sm": (
			"sm": 2.4rem,
			"md": 2.8rem,
			"lg": 3.2rem,
		)
	);

	responsive-sizes($input-height);
*/
@mixin responsive-sizes($list, $property, $important: false) {
	@each $breakpoint, $values in $list {
		@if ($breakpoint == "xs") {
			@each $size, $value in $values {
				&-#{$size} {
					#{$property}: $value if-important($important);
				}
			}
		} @else {
			@media (min-width: map-get($breakpoints, $breakpoint)) {
				@each $size, $value in $values {
					&-#{$size} {
						#{$property}: $value if-important($important);
					}
				}
			}
		}
	}
}

@mixin responsive-sizes-multi($list, $properties) {
	@each $breakpoint, $values in $list {
		@each $size, $value in $values {
			@if ($breakpoint == "xs") {
				&-#{$size} {
					@each $property in $properties {
						#{$property}: $value;
					}
				}
			} @else {
				@media (min-width: map-get($breakpoints, $breakpoint)) {
					@each $size, $value in $values {
						&-#{$size} {
							@each $property in $properties {
								#{$property}: $value;
							}
						}
					}
				}
			}
		}
	}
}

@mixin responsive-sizes-flat($list, $property) {
	@each $breakpoint, $value in $list {
		@if ($breakpoint == "xs") {
			#{$property}: $value;
		} @else {
			@media (min-width: map-get($breakpoints, $breakpoint)) {
				#{$property}: $value;
			}
		}
	}
}

@mixin height-without-navbar() {
	@each $breakpoint, $value in $navbar-height {
		@if ($breakpoint == "xs") {
			height: calc(100vh - $value);
		} @else {
			@media (min-width: map-get($breakpoints, $breakpoint)) {
				height: calc(100vh - $value);
			}
		}
	}
}
